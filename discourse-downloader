#!/usr/bin/env ruby
require 'open-uri'
require 'json'
require 'optparse'
require 'pp'
require 'htmltoword'

CONFIG_FILE = '~/src/discourse-downloader/apikeys'
@print_html = true

# from https://ruby-doc.org/stdlib-2.1.1/libdoc/optparse/rdoc/OptionParser.html
  def parse_args(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.html = false
    options.verbose = false
    options.config_file = CONFIG_FILE

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options] URL"

      opts.separator ""
      opts.separator "Specific options:"

      opts.on("-c", "--config [CONFIG FILE]",
              "Configuration file. Default is #{CONFIG_FILE}") do |config|
        options.config_file < config
      end

      # Boolean switch.
      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        options.verbose = v
      end

      opts.on("-m", "--[no-]markdown", "Output Markdown") do |m|
        options.markdown = m
      end

      opts.on("-w", "--word", "Output docx") do |m|
        options.word = m
      end

      opts.separator ""
      opts.separator "Common options:"

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

    end

    opt_parser.parse!(args)
    options
  end


def print_topic(url_map)

  if @print_html
    puts "HTML"
  else
    puts "NO HTML"
  end

  topic_template = "%{protocol}://%{host}/t/%{topic_id}%{post_num}.json%{api}"
  raw_template = "%{protocol}://%{host}/raw/%{topic_id}%{post_num}%{api}"
  post_template = "%{protocol}://%{host}/t/%{topic_id}%{post_num}.json"
  post_link_template = "%{protocol}://%{host}/t/%{topic_id}%{post_num}"
  url_map[:post_num] = "/1" # make sure to start at the top!
  url = topic_template % url_map

  #puts "=============================\nGetting #{url}\n===================="

  # puts "print_topic: Opening #{url}"
  web_page = open(url).read
  data = JSON.parse(web_page)
  post_stream = data['post_stream']
  stream = post_stream['stream']
  post_map = Hash.new

  stream.each do |post_id|
    post_map[post_id] = nil
  end

  title = data['title']
  total_posts = data['posts_count']


  puts "#{title}: #{total_posts} posts"
  puts "#{stream}"

  if @print_html
    filename = "topic-#{url_map[:topic_id]}.html"
  else
    filename = "topic-#{url_map[:topic_id]}.txt"
  end

  File.open(filename, "w") do |file|
    if @print_html
      file.puts "<html><head><title>#{title}: #{total_posts} posts</title></head>"
    else
      file.puts "#{title}: #{total_posts} posts"
    end
    post_count = 0
    last_post_downloaded = 0
    post_num = 1
    while post_count < total_posts do
      message_text = "this should be erased"
      post_stream['posts'].each do |post|
        name = post['name']
        username = post['username']
        date = post['created_at']
        post_num = post['post_number']
        cooked = post['cooked']
        if @print_html
          message_text = cooked
        else
          url_map[:post_num] = "/#{post_num}"
          post_url = raw_template % url_map
          message_text = open(post_url).read
        end
        post_link = post_link_template % url_map
        post_id = post['id']
        replies = post['reply_count']
        reply_to = post['reply_to_post_number'] || 1
        avg_time = post['avg_time']
        reads = post['reads']
        puts "Processing #{post_id}."
        next if post_map[post_id]
        post_map[post_id] = post_num
        post_count += 1
        if @print_html
        processed_post = "
<hr>
From #{username} #{post_id} #{date}<br>
Name: #{name} (#{username})<br>
Subject: #{title}<br>
Date: #{date}<br>
Post: #{post_num}<br>
In-reply-to: #{reply_to}<br>
Num-Replies: #{replies}<br>
Read-time: #{avg_time}<br>
Times-read: #{reads}<br>
Post-URL: <a href=\"#{post_link}\">#{post_link}</a><br>
<br>
#{message_text}
"        else
        processed_post = "
From #{username} #{post_id} #{date}
Name: #{name} (#{username})
Subject: #{title}
Date: #{date}
Post: #{post_num}
In-reply-to: #{reply_to}
Num-Replies: #{replies}
Read-time: #{avg_time}
Times-read: #{reads}
Post-URL: #{post_link}

#{message_text}
"
        end

        file.puts processed_post
        puts "From #{username} #{post_id} #{date}"
      end
      if post_count < total_posts
        # get new url
        if last_post_downloaded >= post_num
          puts "Problem finding all posts. Last: #{last_post_downloaded}. Current #{post_num}. Giving up"
          post_count = 10000000
        else
          last_post_downloaded = post_num
          url_map[:post_num] = "/#{post_num}"
          url = topic_template % url_map
          puts "=============================\nGetting #{url}\n===================="
          web_page = open(url).read
          data = JSON.parse(web_page)
          post_stream = data['post_stream']
        end
      end
    end
    post_map.each do |post|
      puts "Missing post: #{post[0]}" unless post[1]
      file.puts "Missing post: #{post[0]}" unless post[1]
    end
  end
end


# TODO add error checking

def main
  options = parse_args(ARGV)

  if ARGV.empty?
    parse_args(['-h'])
  else
    url = ARGV[0]
  end

  puts "Got #{url}" unless ARGV.empty?

  load options.config_file
  if API_KEY
    api_string = "?api_key=#{API_KEY}&api_user=#{API_USER}"
  # api: "?api_key=#{API_KEY}&api_user=#{API_USER}",
  else
    api_string = ""
  end

  @print_html= !options.markdown

  if @print_html
    puts "HTML!"
  else
    puts "NO HTMLE!"
  end

  m = url.match(%r{(^https?)://([A-Za-z0-9.]+)/t/.+?/([0-9]+)})
  if m
    url_map = {protocol: m[1],
               host: m[2],
               topic_id: m[3],
               post_num: "/1", # include slash e.g., "/5"
               api: api_string
              }

    print_topic(url_map)
  end

  m = url.match(%r{(^https?)://([A-Za-z0-9.]+)/c/(.+)})
  if m
    puts "Got a category: #{m[3]}"
    cat_map = {protocol: m[1],
               host: m[2],
               cat: m[3],
               api: api_string
              }
    puts "Her is: #{cat_map}"
    get_cat_topics(cat_map)
  end
end

def get_cat_topics(cat_map)
  cat_template = "%{protocol}://%{host}/c/%{cat}.json%{api}"
  url = cat_template % cat_map
  puts "Getting #{url}"

  web_page = open(url).read
  data = JSON.parse(web_page)

  topic_list = data['topic_list']

  topics = topic_list['topics']

  cat_map[:post_num] = ""
  topics.each do |topic|
    puts "#{topic['id']}: #{topic['title']}"
    cat_map[:topic_id] = topic['id']
    print_topic(cat_map)
  end
end

main
