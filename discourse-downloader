#!/usr/bin/env ruby
require 'open-uri'
require 'json'
load 'apikeys'


PRINT_RAW = true

if API_KEY
  api_string = "?api_key=#{API_KEY}&api_user=#{API_USER}"
   # api: "?api_key=#{API_KEY}&api_user=#{API_USER}",
else
  api_string = ""
end

url_map = {protocol: 'https',
           host: "dtqr.literatecomputing.com",
           topic_id: 79,
           post_num: "", # include slash e.g., "/5"
           api: api_string
          }


topic_template = "%{protocol}://%{host}/t/%{topic_id}%{post_num}.json%{api}"
raw_template = "%{protocol}://%{host}/raw/%{topic_id}%{post_num}%{api}"

url = topic_template % url_map

#puts "=============================\nGetting #{url}\n===================="

web_page = open(url).read
data = JSON.parse(web_page)
post_stream = data['post_stream']
stream = post_stream['stream']
post_map = Hash.new

stream.each do |post_id|
  post_map[post_id] = nil
end

title = data['title']
total_posts = data['posts_count']


puts "#{title}: #{total_posts} posts"

post_count = 0
post_num = nil
while post_count < total_posts do
  post_stream['posts'].each do |post|
#    puts "======== Total: #{total_posts} ==#{post['post_number']} ====== Count: #{post_count} ============"
    name = post['name']
    username = post['username']
    date = post['created_at']
    post_num = post['post_number']
    cooked = post['cooked']
    if PRINT_RAW
      url_map[:post_num] = "/#{post_num}"
      message_text = open(raw_template % url_map).read
    else
      message_text = cooked
    end
    post_id = post['id']
    replies = post['reply_count']
    reply_to = post['reply_to_post_number']
    avg_time = post['avg_time']
    reads = post['reads']
    next if post_map[post_id]
    post_map[post_id] = post_num
    post_count += 1
    processed_post = "
From #{username} #{post_id} #{date}
Name: #{name} (#{username})
Subject: #{title}
Date: #{date}
Post: #{post_num}
Reply-to: #{reply_to}
Num-Replies: #{replies}
Read-time: #{avg_time}
Times-read: #{reads}

#{message_text}
"
    puts processed_post
  end
  if post_count < total_posts
    # get new url
    url_map[:post_num] = "/#{post_num + 5}"
    url = topic_template % url_map
    puts "=============================\nGetting #{url}\n===================="
    web_page = open(url).read
    data = JSON.parse(web_page)
    post_stream = data['post_stream']
  end

  post_map.each do |post|
    puts "Missing post: #{post[0]}" unless post[1]
  end

end
